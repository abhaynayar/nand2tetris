// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        // Heap management
        let heap = 2048;      // heapBase
        let heap[0] = 0;      // next
        let heap[1] = 14335;  // length

        let freeList = heap;  // freeList is just a pointer to the head of
                              // the list, initially it is at heapBase.
                              // It may change if list becomes empty.
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        
        // Simple implementation
        var int block;
        let block = freeList;
        let freeList = freeList + size;
        return block;

/*
        // Pseudo-code
        search freeList for first possible segment
            if segment.size >= size+2: possible
        if no such segment is found:
            return failure
        carve a block of size+2 from this segment
        block = base address of found segment's DATA PART
        update freeList and fields of block to account for the allocation
        return block;

        
        // Better implementation
        var int block;
        var int blockBase;

        var Array current;
        let current = freeList; // Start from the head
        while(~((size+2) < current[1])) {
            // TODO: If no such segment is found
            // TODO: If size+2 is more than heap size
            let current = current[0];
        }

        // Update size of segment in freeList
        let current[1] = current[1] - (size+2);

        // Calculate new block start position
        let blockBase = current[1]-size;

        // Update fields of allocated block
        let current[blockBase] = 0;
        let current[blockBase+1] = size;

        // Return the DATA PART of the allocated block
        let block = blockBase+2;
        return block;
*/
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // TODO: Only one element in freeList
        
        /*
        Make the last block point to the POINTER PART of the freed block.
        Don't point to the DATA PART, rather the pointer part;

        The next and the size segment can be accessed using
        heap[addr-1] and heap[addr-2]

        var Array current;
        let current = freeList;

        // Reach the last block
        while(~(current[0]=0)) {
            let current = current[0];
        }

        // Last block now points to freed object
        let current[0] = o;

        // Freed object points to NULL
        let o[-2] = 0;
        */
        return;
    }    
}
