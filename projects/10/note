lexical analysis

tokenizing = grouping characters into tokens
categories of tokens in jack language:
- keyword: class, method, while, etc.
- symbol: special characters
- integerConstant: 0 to 32767
- stringConstant: "not including double quote or newline"
- identifier: _a-zA-Z0-9 (not starting with a number)

tknzr = new JackTokenizer("Prog.jack")
tknzr.advance()
while tknzr.hasMoreTokens() {
    tokenClassifiction = current token classification
    print '<' + tokenClassification + '>'
    print current token value
    print '</' + tokenClassification + '>'
    print newLine
    tknzr.advance()
}

~~~

grammars

terminal rules: RHS includes constants only
non-terminal rules: all other rules

jack grammar (subset):

statement: ifStatement | whileStatement | letStatement
statements: statment*
ifStatement: 'if' '(' expression ')' '{' statements '}' ( 'else' '{' statements '}' )?
whileStatement: 'while' '(' expression ')' '{' statements '}'
letStatement: 'let' varName '=' expression ';'
expression: term (op term)?
term: varName | constant
varName: string not beginning with a digit
constant: a decimal number
op: '+' | '-' | '=' | '>' | '<'

~~~

parse trees (??)

~~~

parser logic

class Compilation Engine {
    compileStatements();
    compileIfStatement();
    compileWhiteStatement() {
        eat('while')
        eat('(')
        compileExpression();
        eat(')')
        ...
    }

    ...
    compileTerm();

    eat(string) {
        if(currentToken <> string)
            error ...
        else
            advance ...
    }
}

parsing logic:
- follow RHS of rule and parse input accordingly
- if RHS has a non-terminal rule xxx, call compilexxx()

observations:
LL grammar: recursive decent parser w/o backtracking
LL(k) parser: needs to look ahead at most k tokens to
              determine which rule is applicable

The grammar we saw was LL(1)

~~~

the jack grammar
+ lexical elements (tokens)

.. symbol: '{'|'}'|'('|')'|'['|']'|'.'|','|';'|'+'|'-'|'*'|'/'|'&'|'|'|'<'|'>'|'='|'~'
.. stringConstant: "unicode char sequence not including double quotes or newlines"
.. integerConstant: 0 to 32767

identifier: _a-zA-Z0-9 (not starting with a number)
keyword: 'class'|'constructor'|'function'|'method'|'field'|'static'|'var'|'int'|'char'|
         'boolean'|'void'|'true'|'false'|'null'|'this'|'let'|'do'|'if'|'else'|'while'|'return'

+ program structure

classes: class*
class: 'class' className '{' classVarDec* subroutineDec* '}'
classVarDec: ('static'|'field') type varName (',' varName)* ';'
type: 'int'|'char'|'boolean'|className
subroutineDec: ('constructor'|'function'|'method') ('void'|type) subroutineName '(' parameterList ')' subroutineBody
parameterList: ((type varName) (',' varName)*)?
subroutineBody: '{' varDec* statements '}'
varDec: 'var' type varName (',' varName)* ';'
className: identifier
subroutineName: identifier
varName: identifier

+ statements

statements: statement*
statement: letStatement | ifStatement | whileStatement | doStatement | returnStatement
letStatement: 'let' varName ('[' expression ']')? '=' expression ';'
ifStatement: 'if' '(' expression ')' '{' statements '}'
whileStatement: 'while' '(' expression ')' '{' statements '}'
doStatement: 'do' subroutineCall ';'
returnStatment: 'return' expression? ';'

+ expressions
** NOTE: for term and subroutineCall you need to look ahead LL(2)

expression: term (op term)*
op: '+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '=' 
term: integerConstant | stringConstant | keywordConstant | varName | varName '[' expression ']' | subroutineCall | '(' expression ')' | unaryOp term
subroutineCall: subroutineName '(' expressionList ')' | (className | varName) '.' subroutineName '(' expressionList ')'
keywordConstant: 'true' | 'false' | 'null' | 'this'
expressionList: (expression (',' expression)*)?
unaryOp: '-' | '~'

~~~

the jack analyzer:

if we encounter a terminalElement xxx:
keyword, symbol, integerConstant, stringConstant, or identifier

the parses generates the output:
<terminalElement>xxx</terminalElement>
if we encounter a nonTerminal element:

1.

where nonTerminal is: 
- class, classVarDec, subroutineDec, parameterList, subroutineBody, varDec
- statements, whileSatement, ifStatement, returnStatement, letStatement, doStatement
- expression, term, expressionList

the parser generates the output:
<nonTerminal>recursive output for the non-terminal body</nonTerminal>

2.

where nonTerminal is: type, className, subroutineName, variableName, statement, subroutineCall
the parser handles it without marking it up.

~~~

the jack analyzer proposed implementation

class JackTokenizer {
    hasMoreTokens()
    advance() # has to figure out tokens, remember not only whitespace spliting!
    tokenType()
}


method              args            return          objective
-------------------------------------------------------------------------------------------------
constructor         infile                          opens file to tokenize
hasMoreTokens       -               bool            checks if any tokens in input
advance             -                               if(hmt): currentToken = next token from input
tokenType           -               KEYWORD         returns type of current token as a constant
                                    SYMBOL
                                    IDENTIFIER
                                    INT_CONST
                                    STRING_CONST
keyWord
symbol
identifier
intVal
stringVal

~~~

class CompilationEngine {
    ...
}



method              args            return          objective
-------------------------------------------------------------------------------------------------
constructor         infile/outfile                  next call compileClass
CompileClass        -               -               compiles a complete class
CompileClassVarDec  -               -               compiles a static/field declaration
...

~~~

building a syntax analyzer

1. tokenizer (<tokens>)
2. analyzer (compilation engine)
    - first make without expressions
    - then add expressions (look ahead)
    - subroutineCall is handled is compileTerm

NOTE: most complex languages use a bottom-up compiler, unlike jack which uses a top-down compiler
NOTE: look into lex and yacc

